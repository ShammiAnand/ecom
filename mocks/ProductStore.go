// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	types "github.com/shammianand/ecom/types"
	mock "github.com/stretchr/testify/mock"
)

// ProductStore is an autogenerated mock type for the ProductStore type
type ProductStore struct {
	mock.Mock
}

// GetProducts provides a mock function with given fields:
func (_m *ProductStore) GetProducts() ([]types.Product, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProducts")
	}

	var r0 []types.Product
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]types.Product, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []types.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Product)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductsByID provides a mock function with given fields: ps
func (_m *ProductStore) GetProductsByID(ps []int) ([]types.Product, error) {
	ret := _m.Called(ps)

	if len(ret) == 0 {
		panic("no return value specified for GetProductsByID")
	}

	var r0 []types.Product
	var r1 error
	if rf, ok := ret.Get(0).(func([]int) ([]types.Product, error)); ok {
		return rf(ps)
	}
	if rf, ok := ret.Get(0).(func([]int) []types.Product); ok {
		r0 = rf(ps)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Product)
		}
	}

	if rf, ok := ret.Get(1).(func([]int) error); ok {
		r1 = rf(ps)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProduct provides a mock function with given fields: product
func (_m *ProductStore) UpdateProduct(product types.Product) error {
	ret := _m.Called(product)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Product) error); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProductStore creates a new instance of ProductStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductStore {
	mock := &ProductStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
